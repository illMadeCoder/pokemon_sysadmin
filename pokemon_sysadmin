#!/bin/bash

# bash arguments
# $1 : optional day id

function cancel() {
    echo -ne '\r'
    for i in $(seq 0 ${#input_buffer})
    do
	echo -ne ' '
    done
    echo -ne '\r'
    input_buffer=""
}

trap 'cancel' INT

previous_inputs=()
previous_inputs_i=0
input_buffer=""
input=""
function input_update() {
    while true
    do
	# read -r: do not allow backslashes to escape any characters
	# read -N: return only after reading exactly NCHARS characters, unless
        # EOF is encountered or read times out, ignoring any
        # delimiter
	# read -s: do not echo input coming from terminal
	echo -ne '\r'
	echo -ne "$input_buffer"
	read -srN1 input

	# echo -n: do not output trailing newline
	# echo -e: enable intrepretation of backslash escapes
	# echo ne 
	input_buffer_length=${#input_buffer}
	case $input in
	    $'\177') # backspace
		if [[ $input_buffer_length -gt 0 ]]
		then
		    input_buffer_length_minus_one=$(($input_buffer_length-1))
	            input_buffer=${input_buffer:0:$input_buffer_length_minus_one}
		fi
		echo -ne '\b'
		echo -ne ' '
		echo -ne '\r'
		;;
	    $'\033')				
		read -srN1 input
		read -srN1 input
		case $input in
		    'A')
			if [[ previous_inputs_index -eq 0 ]]
			then
			    previous_inputs_index=${#previous_inputs[@]}
			fi
			previous_inputs_index=$((previous_inputs_index - 1))
			input_buffer=${previous_inputs[previous_inputs_index]}
		    ;;
		    'B')
			input_buffer=${previous_inputs[previous_inputs_index]}
			if [[ previous_inputs_index -eq ${#previous_inputs[@]} ]]
			then
			    previous_inputs_index=0
			fi
			previous_inputs_index=$((previous_inputs_index + 1))			
			;;
		esac
		;;	    
	    $'\n') # enter
		previous_inputs_index=0
		break
		;;
	    $' ') # space
		input_buffer+=' '
		;;
	    *)
		input_buffer+=$input
		;;	
	esac
	input_buffer_length=${#input_buffer}
    done
}

function prompt() {
    # echo "Pokemon *Nix V0.21"
    # echo "------------------"
    # echo "Displaying the Present Working Directory /$(basename $(pwd))"
    # tree -C
    # echo "------------------"
    # echo "Enter a command or help:"
    # #read -p "/$(basename $(pwd))$ " input
    input_update
    echo -ne '\n'
#    echo "/$(basename $(pwd))? $input_buffer"
#    echo -ne $input_buffer
    echo "/$(basename $(pwd))? $input_buffer"
    echo "------------------"
    $input_buffer
    previous_inputs[${#previous_inputs[@]}]="$input_buffer"
    echo 
    # todo: when output is empty move on without press enter
    echo "------------------"
    read -sp "press enter to continue..." input
    clear
    input_buffer=""
    input=""
}

# todo: press up/down for command history
# todo: tab for auto complete

clear
echo "welcome to pokemon_sysadmin"

root_path="$(dirname "$0")"
game_path="$root_path/game"
game_scripts_path="$root_path/scripts/game_scripts"
init_day_path="$game_scripts_path/init_day.sh"
init_game_path="$game_scripts_path/init_game.sh"

$init_game_path

if [[ $# -gt 0 ]]
then   
    day=$1
else
    read -p "day: " day
fi

$init_day_path $day

cd $game_path

clear
while true
do
    prompt
    #clear
done
